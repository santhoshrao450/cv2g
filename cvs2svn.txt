
#
# ====================================================================
# Copyright (c) 2006-2010 CollabNet.  All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at http://subversion.tigris.org/license-1.html.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
#
# This software consists of voluntary contributions made by many
# individuals.  For exact contribution history, see the revision
# history and logs, available at http://cvs2svn.tigris.org/.
# ====================================================================

#                  #####################
#                  ## PLEASE READ ME! ##
#                  #####################
#
# This is a template for an options file that can be used to configure
# cvs2svn to convert to git rather than to Subversion.  See
# www/cvs2git.html and www/cvs2svn.html for general information, and
# see the comments in this file for information about what options are
# available and how they can be set.
#
# The program that is run to convert from CVS to git is called
# cvs2git.  Run it with the --options option, passing it this file
# like this:
#
#     cvs2git --options=cvs2git-example.options
#
# The output of cvs2git is a blob file and a dump file that can be
# loaded into git using the "git fast-import" command.  Please read
# www/cvs2git.html for more information.
#
# Many options do not have defaults, so it is easier to copy this file
# and modify what you need rather than creating a new options file
# from scratch.  This file is in Python syntax, but you don't need to
# know Python to modify it.  But if you *do* know Python, then you
# will be happy to know that you can use arbitary Python constructs to
# do fancy configuration tricks.
#
# But please be aware of the following:
#
# * In many places, leading whitespace is significant in Python (it is
#   used instead of curly braces to group statements together).
#   Therefore, if you don't know what you are doing, it is best to
#   leave the whitespace as it is.
#
# * In normal strings, Python treats a backslash ("\") as an escape
#   character.  Therefore, if you want to specify a string that
#   contains a backslash, you need either to escape the backslash with
#   another backslash ("\\"), or use a "raw string", as in one if the
#   following equivalent examples:
#
#       cvs_executable = 'c:\\windows\\system32\\cvs.exe'
#       cvs_executable = r'c:\windows\system32\cvs.exe'
#
#   See http://docs.python.org/tutorial/introduction.html#strings for
#   more information.
#
# Two identifiers will have been defined before this file is executed,
# and can be used freely within this file:
#
#     ctx -- a Ctx object (see cvs2svn_lib/context.py), which holds
#         many configuration options
#
#     run_options -- an instance of the GitRunOptions class (see
#         cvs2svn_lib/git_run_options.py), which holds some variables
#         governing how cvs2git is run


# Import some modules that are used in setting the options:
import os

from cvs2svn_lib import config
from cvs2svn_lib import changeset_database
from cvs2svn_lib.common import CVSTextDecoder
from cvs2svn_lib.log import logger
from cvs2svn_lib.git_revision_collector import GitRevisionCollector
from cvs2svn_lib.external_blob_generator import ExternalBlobGenerator
from cvs2svn_lib.git_output_option import GitRevisionMarkWriter
from cvs2svn_lib.git_output_option import GitOutputOption
from cvs2svn_lib.dvcs_common import KeywordHandlingPropertySetter
from cvs2svn_lib.rcs_revision_manager import RCSRevisionReader
from cvs2svn_lib.cvs_revision_manager import CVSRevisionReader
from cvs2svn_lib.symbol_strategy import AllBranchRule
from cvs2svn_lib.symbol_strategy import AllTagRule
from cvs2svn_lib.symbol_strategy import BranchIfCommitsRule
from cvs2svn_lib.symbol_strategy import ExcludeRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceBranchRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceTagRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ExcludeTrivialImportBranchRule
from cvs2svn_lib.symbol_strategy import ExcludeVendorBranchRule
from cvs2svn_lib.symbol_strategy import HeuristicStrategyRule
from cvs2svn_lib.symbol_strategy import UnambiguousUsageRule
from cvs2svn_lib.symbol_strategy import HeuristicPreferredParentRule
from cvs2svn_lib.symbol_strategy import SymbolHintsFileRule
from cvs2svn_lib.symbol_transform import ReplaceSubstringsSymbolTransform
from cvs2svn_lib.symbol_transform import RegexpSymbolTransform
from cvs2svn_lib.symbol_transform import IgnoreSymbolTransform
from cvs2svn_lib.symbol_transform import NormalizePathsSymbolTransform
from cvs2svn_lib.property_setters import AutoPropsPropertySetter
from cvs2svn_lib.property_setters import ConditionalPropertySetter
from cvs2svn_lib.property_setters import cvs_file_is_binary
from cvs2svn_lib.property_setters import CVSBinaryFileDefaultMimeTypeSetter
from cvs2svn_lib.property_setters import CVSBinaryFileEOLStyleSetter
from cvs2svn_lib.property_setters import DefaultEOLStyleSetter
from cvs2svn_lib.property_setters import EOLStyleFromMimeTypeSetter
from cvs2svn_lib.property_setters import ExecutablePropertySetter
from cvs2svn_lib.property_setters import KeywordsPropertySetter
from cvs2svn_lib.property_setters import MimeMapper
from cvs2svn_lib.property_setters import SVNBinaryFileKeywordsPropertySetter

# To choose the level of logging output, uncomment one of the
# following lines:
#logger.log_level = logger.WARN
#logger.log_level = logger.QUIET
logger.log_level = logger.NORMAL
#logger.log_level = logger.VERBOSE
#logger.log_level = logger.DEBUG


# The directory to use for temporary files:
ctx.tmpdir = r'/was/app/cvs/cvsroot/CVSMigration'

# During FilterSymbolsPass, cvs2git records the contents of file
# revisions into a "blob" file in git-fast-import format.  The
# ctx.revision_collector option configures that process.  Choose one of the two ersions and customize its options.

# This first alternative is much slower but is better tested and has a
# chance of working with CVSNT repositories.  It invokes CVS or RCS to
# reconstuct the contents of CVS file revisions:
ctx.revision_collector = GitRevisionCollector(
    # The file in which to write the git-fast-import stream that
    # contains the file revision contents:
    '/was/app/cvs/cvsroot/CVSMigration/git-blob.dat',

    # The following option specifies how the revision contents of the
    # RCS files should be read.
    #
    # RCSRevisionReader uses RCS's "co" program to extract the
    # revision contents of the RCS files during CollectRevsPass.  The
    # constructor argument specifies how to invoke the "co"
    # executable.
    #
    # CVSRevisionReader uses the "cvs" program to extract the revision
    # contents out of the RCS files during OutputPass.  This option is
    # considerably slower than RCSRevisionReader because "cvs" is
    # considerably slower than "co".  However, it works in some
    # situations where RCSRevisionReader fails; see the HTML
    # documentation of the "--use-cvs" option for details.  The
    # constructor argument specifies how to invoke the "co"
    # executable.  It is also possible to pass a global_options
    # parameter to CVSRevisionReader to specify which options should
    # be passed to the cvs command.  By default the correct options
    # are usually chosen, but for CVSNT you might want to add
    # global_options=['-q', '-N', '-f'].
    #
    # Uncomment one of the two following lines:
    #RCSRevisionReader(co_executable=r'co'),
    CVSRevisionReader(cvs_executable=r'cvs'),
    )
# This second alternative is vastly faster than the version above.  It
# uses an external Python program to reconstruct the contents of CVS
# file revisions:
#ctx.revision_collector = ExternalBlobGenerator('cvs2svn-tmp/git-blob.dat')

# cvs2git doesn't need a revision reader because OutputPass only
# refers to blobs that were output during CollectRevsPass, so leave
# this option set to None.
ctx.revision_reader = None

# Change the following line to True if the conversion should only
# include the trunk of the repository (i.e., all branches and tags
# should be omitted from the conversion):
ctx.trunk_only = False

# How to convert CVS author names, log messages, and filenames to
# Unicode.  The first argument to CVSTextDecoder is a list of encoders
# that are tried in order in 'strict' mode until one of them succeeds.
# If none of those succeeds, then fallback_encoder (if it is
# specified) is used in lossy 'replace' mode.  Setting a fallback
# encoder ensures that the encoder always succeeds, but it can cause
# information loss.

# You might want to be especially strict when converting filenames to
# Unicode (e.g., maybe not specify ane),
    #DefaultEOLStyleSetter('native'),

    # Prevent svn:keywords from being set on files that have
    # svn:eol-style unset.
    SVNBinaryFileKeywordsPropertySetter(),

    # If svn:keywords has not been set yet, set it based on the file's
    # CVS mode:
    KeywordsPropertySetter(config.SVN_KEYWORDS_VALUE),

    # Set the svn:executable flag on any files that are marked in CVS as
    # being executable:
    ExecutablePropertySetter(),

    # The following causes keywords to be untouched in binary files and
    # collapsed in all text to be committed:
    ConditionalPropertySetter(
        cvs_file_is_binary, KeywordHandlingPropertySetter('untouched'),
        ),
    KeywordHandlingPropertySetter('collapsed'),

    ])
ctx.revision_property_setters.extend([
    ])

# To skip the cleanup of temporary files, uncomment the following
# option:
#ctx.skip_cleanup = True


# In CVS, it is perfectly possible to make a single commit that
# affects more than one project or more than one branch of a single
# project.  Subversion also allows such commits.  Therefore, by
# default, when cvs2svn sees what looks like a cross-project or
# cross-branch CVS commit, it converts it into a
# cross-project/cross-branch Subversion commit.
#
# However, other tools and SCMs have trouble representing
# cross-project or cross-branch commits.  (For example, Trac's Revtree
# plugin, http://www.trac-hacks.org/wiki/RevtreePlugin is confused by
# such commits.)  Therefore, we provide the following two options to
# allow cross-project/cross-branch commits to be suppressed.

# cvs2git only supports single-project conversions (multiple-project
# conversions wouldn't really make sense for git anyway).  So this
# option must be set to False:
ctx.cross_project_commits = False

# git itself doesn't allow commits that affect more than one branch,
# so this option must be set to False:
ctx.cross_branch_commits = False

# cvs2git does not yet handle translating .cvsignore files into
# .gitignore files, so by default, the .cvsignore files are included
# in the conversion output.  If you would like to omit the .cvsignore
# files from the output, set this option to False:
ctx.keep_cvsignore = True

# By default, it is a fatal error for a CVS ",v" file to appear both
# inside and outside of an "Attic" subdirectory (this should never
# happen, but frequently occurs due to botched repository
# administration).  If you would like to retain both versions of such
# files, change the following option to True, and the attic version of
# the file will be written to a subdirectory called "Attic" in the
# output repository:
ctx.retain_conflicting_attic_files = False

# CVS uses unix login names as author names whereas git requires
# author names to be of the form "foo <bar>".  The default is to set
# the git author to "cvsauthor <cvsauthor>".  author_transforms can be
# used to map cvsauthor names (e.g., "jrandom") to a true name and
# email address (e.g., "J. Random <jrandom@example.com>" for the
# example shown).  All strings should be either Unicode strings (i.e.,
# with "u" as a prefix) or 8-bit strings in the utf-8 encoding.  The
# values can either be strings in the form "name <email>" or tuples
# (name, email).  Please substitute your own project's usernames here
# to use with the author_transforms option of GitOutputOption below.


# This is the main option that causes cvs2svn to output to a
# "fastimport"-format dumpfile rather than to Subversion:
ctx.output_option = GitOutputOption(
    # The file in which to write the git-fast-import stream that
    # contains the changesets and branch/tag information:
    os.path.join(ctx.tmpdir, 'git-dump.dat'),

    # The blobs will be written via the revision recorder, so in
    # OutputPass we only have to emit references to the blob marks:
    GitRevisionMarkWriter(),

    # Optional map from CVS author names to git author names:
    #author_transforms=author_transforms,
    )

# Change this option to True to turn on profiling of cvs2svn (for
# debugging purposes):
run_options.profiling = False


# Should CVSItem -> Changeset database files be memory mapped?  In
# some tests, using memory mapping speeded up the overall conversion
# by about 5%.  But this option can cause the conversion to fail with
# an out of memory error if the conversion computer runs out of
# virtual address space (e.g., when running a very large conversion on
# a 32-bit operating system).  Therefore it is disabled by default.
# Uncomment the following line to allow these database files to be
# memory mapped.
#changeset_database.use_mmap_for_cvs_item_to_changeset_table = True

# Now set the project to be converted to git.  cvs2git only supports
# single-project conversions, so this method must only be called
# once:
run_options.set_project(
    # The filesystem path to the part of the CVS repository (*not* a
    # CVS working copy) that should be converted.  This may be a
    # subdirectory (i.e., a module) within a larger CVS repository.
    r'/was/app/cvs/cvsdba/Acord2',

    # A list of symbol transformations that can be used to rename
    # symbols in this project.
    symbol_transforms=[
        # Use IgnoreSymbolTransforms like the following to completely
        # ignore symbols matching a regular expression when parsing
        # the CVS repository, for example to avoid warnings about
        # branches with two names and to choose the preferred name.
        # It is *not* recommended to use this instead of
        # ExcludeRegexpStrategyRule; though more efficient,
        # IgnoreSymbolTransforms are less flexible and don't exclude
        # branches correctly.  The argument is a Python-style regular
        # expression that has to match the *whole* CVS symbol name:
        #IgnoreSymbolTransform(r'nightly-build-tag-.*')

        # RegexpSymbolTransforms transform symbols textually using a
        # regular expression.  The first argument is a Python regular
        # expression pattern and the second is a replacement pattern.
        # The pattern is matched against each symbol name.  If it
        # matches the whole symbol name, then the symbol name is
        # replaced with the corresponding replacement text.  The
        # replacement can include substitution patterns (e.g., r'\1'
        # or r'\g<name>').  Typically you will want to use raw strings
        # (strings with a preceding 'r', like shown in the examples)
        # for the regexp and its replacement to avoid backslash
        # substitution within those strings.
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)',
        #                      r'release-\1.\2'),
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)_(\d+)',
        #                      r'release-\1.\2.\3'),

        # Simple 1:1 character replacements can also be done.  The
        # following transform, which converts backslashes into forward
        # slashes, should usually be included:
        ReplaceSubstringsSymbolTransform('\\','/'),

        # This last rule eliminates leading, trailing, and repeated
        # slashes within the output symbol names:
        NormalizePathsSymbolTransform(),
        ],

    # See the definition of global_symbol_strategy_rules above for a
    # description of this option:
    symbol_strategy_rules=global_symbol_strategy_rules,

    # Exclude paths from the conversion. Should be relative to
    # repository path and use forward slashes:
    #exclude_paths=['file-to-exclude.txt,v', 'dir/to/exclude'],
    )

pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration-># (Be in -*- mode: python; coding: utf-8 -*- mode.)
#
# ====================================================================
# Copyright (c) 2006-2010 CollabNet.  All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at http://subversion.tigris.org/license-1.html.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
#
# This software consists of voluntary contributions made by many
# individuals.  For exact contribution history, see the revision
# history and logs, available at http://cvs2svn.tigris.org/.
# ====================================================================

#                  #####################
#                  ## PLEASE READ ME! ##
#                  #####################
#
# This is a template for an options file that can be used to configure
# cvs2svn to convert to git rather than to Subversion.  See
# www/cvs2git.html and www/cvs2svn.html for general information, and
# see the comments in this file for information about what options are
# available and how they can be set.
#
# The program that is run to convert from CVS to git is called
# cvs2git.  Run it with the --options option, passing it this file
# like this:
#
#     cvs2git --options=cvs2git-example.options
#
# The output of cvs2git is a blob file and a dump file that can be
/usr/bin/ksh: 0403-057 Syntax error: `(' is not expected.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration-># loaded into git using the "git fast-import" command.  Please read
# www/cvs2git.html for more information.
#
# Many options do not have defaults, so it is easier to copy this file
# and modify what you need rather than creating a new options file
# from scratch.  This file is in Python syntax, but you don't need to
# know Python to modify it.  But if you *do* know Python, then you
# will be happy to know that you can use arbitary Python constructs to
# do fancy configuration tricks.
#
# But please be aware of the following:
#
# * In many places, leading whitespace is significant in Python (it is
#   used instead of curly braces to group statements together).
#   Therefore, if you don't know what you are doing, it is best to
#   leave the whitespace as it is.
#
# * In normal strings, Python treats a backslash ("\") as an escape
#   character.  Therefore, if you want to specify a string that
#   contains a backslash, you need either to escape the backslash with
#   another backslash ("\\"), or use a "raw string", as in one if the
#   following equivalent examples:
#
#       cvs_executable = 'c:\\windows\\system32\\cvs.exe'
#       cvs_executable = r'c:\windows\system32\cvs.exe'
#
#   See http://docs.python.org/tutorial/introduction.html#strings for
#   more information.
#
# Two identifiers will have been defined before this file is executed,
# and can be used freely within this file:
#
#     ctx -- a Ctx object (see cvs2svn_lib/context.py), which holds
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->#         many configuration options
#
#     run_options -- an instance of the GitRunOptions class (see
#         cvs2svn_lib/git_run_options.py), which holds some variables
#         governing how cvs2git is run


# Import some modules that are used in setting the options:
import os

from cvs2svn_lib import config
from cvs2svn_lib import changeset_database
from cvs2svn_lib.common import CVSTextDecoder
from cvs2svn_lib.log import logger
from cvs2svn_lib.git_revision_collector import GitRevisionCollector
from cvs2svn_lib.external_blob_generator import ExternalBlobGenerator
from cvs2svn_lib.git_output_option import GitRevisionMarkWriter
from cvs2svn_lib.git_output_option import GitOutputOption
from cvs2svn_lib.dvcs_common import KeywordHandlingPropertySetter
from cvs2svn_lib.rcs_revision_manager import RCSRevisionReader
from cvs2svn_lib.cvs_revision_manager import CVSRevisionReader
from cvs2svn_lib.symbol_strategy import AllBranchRule
from cvs2svn_lib.symbol_strategy import AllTagRule
from cvs2svn_lib.symbol_strategy import BranchIfCommitsRule
from cvs2svn_lib.symbol_strategy import ExcludeRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceBranchRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceTagRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ExcludeTrivialImportBranchRule
from cvs2svn_lib.symbol_strategy import ExcludeVendorBranchRule
from cvs2svn_lib.symbol_strategy import HeuristicStrategyRule
from cvs2svn_lib.symbol_strategy import UnambiguousUsageRule
from cvs2svn_lib.symbol_strategy import HeuristicPreferredParentRule
from cvs2svn_lib.symbol_strategy import SymbolHintsFileRule
from cvs2svn_lib.symbol_transform import ReplaceSubstringsSymbolTransform
from cvs2svn_lib.symbol_transform import RegexpSymbolTransform
from cvs2svn_lib.symbol_transform import IgnoreSymbolTransform
from cvs2svn_lib.symbol_transform import NormalizePathsSymbolTransform
from cvs2svn_lib.property_setters import AutoPropsPropertySetter
from cvs2svn_lib.property_setters import ConditionalPropertySetter
from cvs2svn_lib.property_setters import cvs_file_is_binary
from cvs2svn_lib.property_setters import CVSBinaryFileDefaultMimeTypeSetter
from cvs2svn_lib.property_setters import CVSBinaryFileEOLStyleSetter
from cvs2svn_lib.property_setters import DefaultEOLStyleSetter
from cvs2svn_lib.property_setters import EOLStyleFromMimeTypeSetter
from cvs2svn_lib.property_setters import ExecutablePropertySetter
from cvs2svn_lib.property_setters import KeywordsPropertySetter
from cvs2svn_lib.property_setters import MimeMapper
from cvs2svn_lib.property_setters import SVNBinaryFileKeywordsPropertySetter

# To choose the level of logging output, uncomment one of the
# following lines:
#logger.log_level = logger.WARN
#logger.log_level = logger.QUIET
logger.log_level = logger.NORMAL
#logger.log_level = logger.VERBOSE
#logger.log_level = logger.DEBUG


# The directory to use for temporary files:
ctx.tmpdir = r'/was/app/cvs/cvsroot/CVSMigration'

# During FilterSymbolsPass, cvs2git records the contents of file
# revisions into a "blob" file in git-fast-import format.  The
# ctx.revision_collector option configures that process.  Choose one of the two ersions and customize its options.

# This first alternative is much slower but is better tested and has a
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: import:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration-># chance of working with CVSNT repositories.  It invokes CVS or RCS to
# reconstuct the contents of CVS file revisions:
ctx.revision_collector = GitRevisionCollector(
    # The file in which to write the git-fast-import stream that
    # contains the file revision contents:
    '/was/app/cvs/cvsroot/CVSMigration/git-blob.dat',

    # The following option specifies how the revision contents of the
    # RCS files should be read.
    #
    # RCSRevisionReader uses RCS's "co" program to extract the
    # revision contents of the RCS files during CollectRevsPass.  The
    # constructor argument specifies how to invoke the "co"
    # executable.
    #
    # CVSRevisionReader uses the "cvs" program to extract the revision
eplacement text.  The
        # replacement can include substitution patterns (e.g., r'\1'
        # or r'\g<name>').  Typically you will want to use raw strings
        # (strings with a preceding 'r', like shown in the examples)
        # for the regexp and its replacement to avoid backslash
        # substitution within those strings.
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)',
        #                      r'release-\1.\2'),
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)_(\d+)',
        #                      r'release-\1.\2.\3'),

        # Simple 1:1 character replacements can also be done.  The
        # following transform, which converts backslashes into forward
        # slashes, should usually be included:
        ReplaceSubstringsSymbolTransform('\\','/'),

        # This last rule eliminates leading, trailing, and repeated
        # slashes within the output symbol names:
        NormalizePathsSymbolTransform(),
        ],

    # See the definition of global_symbol_strategy_rules above for a
    # description of this option:
    symbol_strategy_rules=global_symbol_strategy_rules,

    # Exclude paths from the conversion. Should be relative to
    # repository path and use forward slashes:
    #exclude_paths=['file-to-exclude.txt,v', 'dir/to/exclude'],
    )
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: logger.log_level:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: ctx.tmpdir:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: 0403-057 Syntax error: `(' is not expected.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: /was/app/cvs/cvsroot/CVSMigration/git-blob.dat,:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: eplacement:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: 0403-057 Syntax error: `(' is not expected.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: ],:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->/usr/bin/ksh: 0403-057 Syntax error: `)' is not expected.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->cls
/usr/bin/ksh: cls:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->clc
/usr/bin/ksh: clc:  not found.
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->clear
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->ls
cvs2git.options
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->vi cvs2git.options
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->ls
cvs2git.options
pinnins@wasdev:/was/app/cvs/cvsroot/dataservicesmigration->cat cvs2git.options

# (Be in -*- mode: python; coding: utf-8 -*- mode.)
#
# ====================================================================
# Copyright (c) 2006-2010 CollabNet.  All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at http://subversion.tigris.org/license-1.html.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
#
# This software consists of voluntary contributions made by many
# individuals.  For exact contribution history, see the revision
# history and logs, available at http://cvs2svn.tigris.org/.
# ====================================================================

#                  #####################
#                  ## PLEASE READ ME! ##
#                  #####################
#
# This is a template for an options file that can be used to configure
# cvs2svn to convert to git rather than to Subversion.  See
# www/cvs2git.html and www/cvs2svn.html for general information, and
# see the comments in this file for information about what options are
# available and how they can be set.
#
# The program that is run to convert from CVS to git is called
# cvs2git.  Run it with the --options option, passing it this file
# like this:
#
#     cvs2git --options=cvs2git-example.options
#
# The output of cvs2git is a blob file and a dump file that can be
# loaded into git using the "git fast-import" command.  Please read
# www/cvs2git.html for more information.
#
# Many options do not have defaults, so it is easier to copy this file
# and modify what you need rather than creating a new options file
# from scratch.  This file is in Python syntax, but you don't need to
# know Python to modify it.  But if you *do* know Python, then you
# will be happy to know that you can use arbitary Python constructs to
# do fancy configuration tricks.
#
# But please be aware of the following:
#
# * In many places, leading whitespace is significant in Python (it is
#   used instead of curly braces to group statements together).
#   Therefore, if you don't know what you are doing, it is best to
#   leave the whitespace as it is.
#
# * In normal strings, Python treats a backslash ("\") as an escape
#   character.  Therefore, if you want to specify a string that
#   contains a backslash, you need either to escape the backslash with
#   another backslash ("\\"), or use a "raw string", as in one if the
#   following equivalent examples:
#
#       cvs_executable = 'c:\\windows\\system32\\cvs.exe'
#       cvs_executable = r'c:\windows\system32\cvs.exe'
#
#   See http://docs.python.org/tutorial/introduction.html#strings for
#   more information.
#
# Two identifiers will have been defined before this file is executed,
# and can be used freely within this file:
#
#     ctx -- a Ctx object (see cvs2svn_lib/context.py), which holds
#         many configuration options
#
#     run_options -- an instance of the GitRunOptions class (see
#         cvs2svn_lib/git_run_options.py), which holds some variables
#         governing how cvs2git is run


# Import some modules that are used in setting the options:
import os

from cvs2svn_lib import config
from cvs2svn_lib import changeset_database
from cvs2svn_lib.common import CVSTextDecoder
from cvs2svn_lib.log import logger
from cvs2svn_lib.git_revision_collector import GitRevisionCollector
from cvs2svn_lib.external_blob_generator import ExternalBlobGenerator
from cvs2svn_lib.git_output_option import GitRevisionMarkWriter
from cvs2svn_lib.git_output_option import GitOutputOption
from cvs2svn_lib.dvcs_common import KeywordHandlingPropertySetter
from cvs2svn_lib.rcs_revision_manager import RCSRevisionReader
from cvs2svn_lib.cvs_revision_manager import CVSRevisionReader
from cvs2svn_lib.symbol_strategy import AllBranchRule
from cvs2svn_lib.symbol_strategy import AllTagRule
from cvs2svn_lib.symbol_strategy import BranchIfCommitsRule
from cvs2svn_lib.symbol_strategy import ExcludeRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceBranchRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceTagRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ExcludeTrivialImportBranchRule
from cvs2svn_lib.symbol_strategy import ExcludeVendorBranchRule
from cvs2svn_lib.symbol_strategy import HeuristicStrategyRule
from cvs2svn_lib.symbol_strategy import UnambiguousUsageRule
from cvs2svn_lib.symbol_strategy import HeuristicPreferredParentRule
from cvs2svn_lib.symbol_strategy import SymbolHintsFileRule
from cvs2svn_lib.symbol_transform import ReplaceSubstringsSymbolTransform
from cvs2svn_lib.symbol_transform import RegexpSymbolTransform
from cvs2svn_lib.symbol_transform import IgnoreSymbolTransform
from cvs2svn_lib.symbol_transform import NormalizePathsSymbolTransform
from cvs2svn_lib.property_setters import AutoPropsPropertySetter
from cvs2svn_lib.property_setters import ConditionalPropertySetter
from cvs2svn_lib.property_setters import cvs_file_is_binary
from cvs2svn_lib.property_setters import CVSBinaryFileDefaultMimeTypeSetter
from cvs2svn_lib.property_setters import CVSBinaryFileEOLStyleSetter
from cvs2svn_lib.property_setters import DefaultEOLStyleSetter
from cvs2svn_lib.property_setters import EOLStyleFromMimeTypeSetter
from cvs2svn_lib.property_setters import ExecutablePropertySetter
from cvs2svn_lib.property_setters import KeywordsPropertySetter
from cvs2svn_lib.property_setters import MimeMapper
from cvs2svn_lib.property_setters import SVNBinaryFileKeywordsPropertySetter

# To choose the level of logging output, uncomment one of the
# following lines:
#logger.log_level = logger.WARN
#logger.log_level = logger.QUIET
logger.log_level = logger.NORMAL
#logger.log_level = logger.VERBOSE
#logger.log_level = logger.DEBUG


# The directory to use for temporary files:
ctx.tmpdir = r'/was/app/cvs/cvsroot/CVSMigration'

# During FilterSymbolsPass, cvs2git records the contents of file
# revisions into a "blob" file in git-fast-import format.  The
# ctx.revision_collector option configures that process.  Choose one of the two ersions and customize its options.

# This first alternative is much slower but is better tested and has a
# chance of working with CVSNT repositories.  It invokes CVS or RCS to
# reconstuct the contents of CVS file revisions:
ctx.revision_collector = GitRevisionCollector(
    # The file in which to write the git-fast-import stream that
    # contains the file revision contents:
    '/was/app/cvs/cvsroot/CVSMigration/git-blob.dat',

    # The following option specifies how the revision contents of the
    # RCS files should be read.
    #
    # RCSRevisionReader uses RCS's "co" program to extract the
    # revision contents of the RCS files during CollectRevsPass.  The
    # constructor argument specifies how to invoke the "co"
    # executable.
    #
    # CVSRevisionReader uses the "cvs" program to extract the revision
    # contents out of the RCS files during OutputPass.  This option is
    # considerably slower than RCSRevisionReader because "cvs" is
    # considerably slower than "co".  However, it works in some
    # situations where RCSRevisionReader fails; see the HTML
    # documentation of the "--use-cvs" option for details.  The
    # constructor argument specifies how to invoke the "co"
    # executable.  It is also possible to pass a global_options
    # parameter to CVSRevisionReader to specify which options should
    # be passed to the cvs command.  By default the correct options
    # are usually chosen, but for CVSNT you might want to add
    # global_options=['-q', '-N', '-f'].
    #
    # Uncomment one of the two following lines:
    #RCSRevisionReader(co_executable=r'co'),
    CVSRevisionReader(cvs_executable=r'cvs'),
    )
# This second alternative is vastly faster than the version above.  It
# uses an external Python program to reconstruct the contents of CVS
# file revisions:
#ctx.revision_collector = ExternalBlobGenerator('cvs2svn-tmp/git-blob.dat')

# cvs2git doesn't need a revision reader because OutputPass only
# refers to blobs that were output during CollectRevsPass, so leave
# this option set to None.
ctx.revision_reader = None

# Change the following line to True if the conversion should only
# include the trunk of the repository (i.e., all branches and tags
# should be omitted from the conversion):
ctx.trunk_only = False

# How to convert CVS author names, log messages, and filenames to
# Unicode.  The first argument to CVSTextDecoder is a list of encoders
# that are tried in order in 'strict' mode until one of them succeeds.
# If none of those succeeds, then fallback_encoder (if it is
# specified) is used in lossy 'replace' mode.  Setting a fallback
# encoder ensures that the encoder always succeeds, but it can cause
# information loss.

# You might want to be especially strict when converting filenames to
# Unicode (e.g., maybe not specify ane),
    #DefaultEOLStyleSetter('native'),

    # Prevent svn:keywords from being set on files that have
    # svn:eol-style unset.
    SVNBinaryFileKeywordsPropertySetter(),

    # If svn:keywords has not been set yet, set it based on the file's
    # CVS mode:
    KeywordsPropertySetter(config.SVN_KEYWORDS_VALUE),

    # Set the svn:executable flag on any files that are marked in CVS as
    # being executable:
    ExecutablePropertySetter(),

    # The following causes keywords to be untouched in binary files and
    # collapsed in all text to be committed:
    ConditionalPropertySetter(
        cvs_file_is_binary, KeywordHandlingPropertySetter('untouched'),
        ),
    KeywordHandlingPropertySetter('collapsed'),

    ])
ctx.revision_property_setters.extend([
    ])

# To skip the cleanup of temporary files, uncomment the following
# option:
#ctx.skip_cleanup = True


# In CVS, it is perfectly possible to make a single commit that
# affects more than one project or more than one branch of a single
# project.  Subversion also allows such commits.  Therefore, by
# default, when cvs2svn sees what looks like a cross-project or
# cross-branch CVS commit, it converts it into a
# cross-project/cross-branch Subversion commit.
#
# However, other tools and SCMs have trouble representing
# cross-project or cross-branch commits.  (For example, Trac's Revtree
# plugin, http://www.trac-hacks.org/wiki/RevtreePlugin is confused by
# such commits.)  Therefore, we provide the following two options to
# allow cross-project/cross-branch commits to be suppressed.

# cvs2git only supports single-project conversions (multiple-project
# conversions wouldn't really make sense for git anyway).  So this
# option must be set to False:
ctx.cross_project_commits = False

# git itself doesn't allow commits that affect more than one branch,
# so this option must be set to False:
ctx.cross_branch_commits = False

# cvs2git does not yet handle translating .cvsignore files into
# .gitignore files, so by default, the .cvsignore files are included
# in the conversion output.  If you would like to omit the .cvsignore
# files from the output, set this option to False:
ctx.keep_cvsignore = True

# By default, it is a fatal error for a CVS ",v" file to appear both
# inside and outside of an "Attic" subdirectory (this should never
# happen, but frequently occurs due to botched repository
# administration).  If you would like to retain both versions of such
# files, change the following option to True, and the attic version of
# the file will be written to a subdirectory called "Attic" in the
# output repository:
ctx.retain_conflicting_attic_files = False

# CVS uses unix login names as author names whereas git requires
# author names to be of the form "foo <bar>".  The default is to set
# the git author to "cvsauthor <cvsauthor>".  author_transforms can be
# used to map cvsauthor names (e.g., "jrandom") to a true name and
# email address (e.g., "J. Random <jrandom@example.com>" for the
# example shown).  All strings should be either Unicode strings (i.e.,
# with "u" as a prefix) or 8-bit strings in the utf-8 encoding.  The
# values can either be strings in the form "name <email>" or tuples
# (name, email).  Please substitute your own project's usernames here
# to use with the author_transforms option of GitOutputOption below.


# This is the main option that causes cvs2svn to output to a
# "fastimport"-format dumpfile rather than to Subversion:
ctx.output_option = GitOutputOption(
    # The file in which to write the git-fast-import stream that
    # contains the changesets and branch/tag information:
    os.path.join(ctx.tmpdir, 'git-dump.dat'),

    # The blobs will be written via the revision recorder, so in
    # OutputPass we only have to emit references to the blob marks:
    GitRevisionMarkWriter(),

    # Optional map from CVS author names to git author names:
    #author_transforms=author_transforms,
    )

# Change this option to True to turn on profiling of cvs2svn (for
# debugging purposes):
run_options.profiling = False


# Should CVSItem -> Changeset database files be memory mapped?  In
# some tests, using memory mapping speeded up the overall conversion
# by about 5%.  But this option can cause the conversion to fail with
# an out of memory error if the conversion computer runs out of
# virtual address space (e.g., when running a very large conversion on
# a 32-bit operating system).  Therefore it is disabled by default.
# Uncomment the following line to allow these database files to be
# memory mapped.
#changeset_database.use_mmap_for_cvs_item_to_changeset_table = True

# Now set the project to be converted to git.  cvs2git only supports
# single-project conversions, so this method must only be called
# once:
run_options.set_project(
    # The filesystem path to the part of the CVS repository (*not* a
    # CVS working copy) that should be converted.  This may be a
    # subdirectory (i.e., a module) within a larger CVS repository.
    r'/was/app/cvs/cvsdba/Acord2',

    # A list of symbol transformations that can be used to rename
    # symbols in this project.
    symbol_transforms=[
        # Use IgnoreSymbolTransforms like the following to completely
        # ignore symbols matching a regular expression when parsing
        # the CVS repository, for example to avoid warnings about
        # branches with two names and to choose the preferred name.
        # It is *not* recommended to use this instead of
        # ExcludeRegexpStrategyRule; though more efficient,
        # IgnoreSymbolTransforms are less flexible and don't exclude
        # branches correctly.  The argument is a Python-style regular
        # expression that has to match the *whole* CVS symbol name:
        #IgnoreSymbolTransform(r'nightly-build-tag-.*')

        # RegexpSymbolTransforms transform symbols textually using a
        # regular expression.  The first argument is a Python regular
        # expression pattern and the second is a replacement pattern.
        # The pattern is matched against each symbol name.  If it
        # matches the whole symbol name, then the symbol name is
        # replaced with the corresponding replacement text.  The
        # replacement can include substitution patterns (e.g., r'\1'
        # or r'\g<name>').  Typically you will want to use raw strings
        # (strings with a preceding 'r', like shown in the examples)
        # for the regexp and its replacement to avoid backslash
        # substitution within those strings.
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)',
        #                      r'release-\1.\2'),
        #RegexpSymbolTransform(r'release-(\d+)_(\d+)_(\d+)',
        #                      r'release-\1.\2.\3'),

        # Simple 1:1 character replacements can also be done.  The
        # following transform, which converts backslashes into forward
        # slashes, should usually be included:
        ReplaceSubstringsSymbolTransform('\\','/'),

        # This last rule eliminates leading, trailing, and repeated
        # slashes within the output symbol names:
        NormalizePathsSymbolTransform(),
        ],

    # See the definition of global_symbol_strategy_rules above for a
    # description of this option:
    symbol_strategy_rules=global_symbol_strategy_rules,

    # Exclude paths from the conversion. Should be relative to
    # repository path and use forward slashes:
    #exclude_paths=['file-to-exclude.txt,v', 'dir/to/exclude'],
    )

